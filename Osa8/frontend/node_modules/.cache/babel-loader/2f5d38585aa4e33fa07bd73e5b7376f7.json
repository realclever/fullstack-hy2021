{"ast":null,"code":"var _jsxFileName = \"/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/components/Recommendations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { BOOKS_GENRE, LOGGED_USER } from \"../queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Recommendations = props => {\n  _s();\n\n  const [genre, setGenre] = useState();\n  const [books, setBooks] = useState();\n  const [getBooks, bookResult] = useLazyQuery(BOOKS_GENRE, {\n    fetchPolicy: \"no cache\"\n  });\n  const userResult = useQuery(LOGGED_USER, {\n    fetchPolicy: \"no-cache\"\n  });\n  useEffect(() => {\n    if (!userResult) {} else if (!userResult.data) {} else if (userResult.data.me !== null) {\n      setGenre(userResult.data.me.favoriteGenre);\n      getBooks({\n        variables: {\n          genre: userResult.data.me.favoriteGenre\n        }\n      });\n    }\n  }, [getBooks, userResult]);\n  useEffect(() => {\n    if (bookResult.data) {\n      setBooks(bookResult.data.allBooks);\n    }\n  }, [bookResult.data]);\n\n  if (!props.show || !userResult || !books || !genre) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"books in your favorite genre \", /*#__PURE__*/_jsxDEV(\"strong\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"published\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"genres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), books.map(a => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", a.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.author.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.published\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.genres\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, a.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recommendations, \"2jM8Ci1y+Dbq5SAicwoXAk5yl/Q=\", false, function () {\n  return [useLazyQuery, useQuery];\n});\n\n_c = Recommendations;\nexport default Recommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"sources":["/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/components/Recommendations.js"],"names":["React","useEffect","useState","useQuery","useLazyQuery","BOOKS_GENRE","LOGGED_USER","Recommendations","props","genre","setGenre","books","setBooks","getBooks","bookResult","fetchPolicy","userResult","data","me","favoriteGenre","variables","allBooks","show","map","a","title","author","name","published","genres"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { BOOKS_GENRE, LOGGED_USER } from \"../queries\";\n\nconst Recommendations = (props) => {\n  const [genre, setGenre] = useState();\n  const [books, setBooks] = useState();\n\n  const [getBooks, bookResult] = useLazyQuery(BOOKS_GENRE, {\n    fetchPolicy: \"no cache\",\n  });\n  const userResult = useQuery(LOGGED_USER, {\n    fetchPolicy: \"no-cache\",\n  });\n\n  useEffect(() => {\n    if (!userResult) {\n    } else if (!userResult.data) {\n    } else if (userResult.data.me !== null) {\n      setGenre(userResult.data.me.favoriteGenre);\n      getBooks({ variables: { genre: userResult.data.me.favoriteGenre } });\n    }\n  }, [getBooks, userResult]);\n\n  useEffect(() => {\n    if (bookResult.data) {\n      setBooks(bookResult.data.allBooks);\n    }\n  }, [bookResult.data]);\n\n  if (!props.show || !userResult || !books || !genre) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>Recommendations</h2>\n      <div>\n        <p>\n          books in your favorite genre <strong></strong>\n        </p>\n      </div>\n      <table>\n        <tbody>\n          <tr>\n            <th>title</th>\n            <th>author</th>\n            <th>published</th>\n            <th>genres</th>\n          </tr>\n          {books.map((a) => (\n            <tr key={a.title}>\n              <td> {a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n              <td>{a.genres}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Recommendations;\n"]},"metadata":{},"sourceType":"module"}