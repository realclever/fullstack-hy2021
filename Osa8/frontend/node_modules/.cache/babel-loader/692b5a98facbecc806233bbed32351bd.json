{"ast":null,"code":"var _jsxFileName = \"/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\"; //import { onError } from \"@apollo/client/link/error\";\n\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\n/*\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(\"user-token\");\n  return {\n    headers: { ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  };\n});\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4000\"\n});\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:4000/graphql\",\n  options: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, authLink.concat(httpLink));\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 68,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","split","setContext","getMainDefinition","WebSocketLink","authLink","_","headers","token","localStorage","getItem","authorization","httpLink","uri","wsLink","options","reconnect","splitLink","query","definition","kind","operation","concat","client","cache","link","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;AAEA,SACEC,YADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,aAJF,EAKEC,KALF,QAMO,gBANP;AAOA,SAASC,UAAT,QAA2B,qBAA3B,C,CACA;;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAAEc,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,MAAM,GAAG,IAAIV,aAAJ,CAAkB;AAC/BS,EAAAA,GAAG,EAAE,6BAD0B;AAE/BE,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AAFsB,CAAlB,CAAf;AAOA,MAAMC,SAAS,GAAGhB,KAAK,CACrB,CAAC;AAAEiB,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGhB,iBAAiB,CAACe,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBP,MARqB,EASrBT,QAAQ,CAACiB,MAAT,CAAgBV,QAAhB,CATqB,CAAvB;AAYA,MAAMW,MAAM,GAAG,IAAI1B,YAAJ,CAAiB;AAC9B2B,EAAAA,KAAK,EAAE,IAAIxB,aAAJ,EADuB;AAE9ByB,EAAAA,IAAI,EAAER;AAFwB,CAAjB,CAAf;AAKAtB,QAAQ,CAAC+B,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n  split,\n} from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\";\n//import { onError } from \"@apollo/client/link/error\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\n\n/*\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n*/\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"user-token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    },\n  };\n});\n\nconst httpLink = new HttpLink({ uri: \"http://localhost:4000\" });\n\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:4000/graphql\",\n  options: {\n    reconnect: true,\n  },\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}