{"ast":null,"code":"var _jsxFileName = \"/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useApolloClient, useSubscription, useLazyQuery } from \"@apollo/client\";\nimport Authors from \"./components/Authors\";\nimport Books from \"./components/Books\";\nimport NewBook from \"./components/NewBook\";\nimport LoginForm from \"./components/LoginForm\";\nimport Recommendations from \"./components/Recommendations\";\nimport { BOOK_ADDED, ALL_BOOKS, LOGGED_USER } from \"./queries\"; //import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notify = ({\n  errorMessage\n}) => {\n  if (!errorMessage) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    children: errorMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Notify;\n\nconst App = () => {\n  _s();\n\n  const [page, setPage] = useState(\"authors\");\n  const [token, setToken] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const client = useApolloClient();\n  const [loggedUser, result] = useLazyQuery(LOGGED_USER, {\n    pollInterval: 1000\n  });\n\n  const notify = message => {\n    setErrorMessage(message);\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 3000);\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"user-token\");\n    return !token ? null : setToken(token);\n  }, []);\n\n  const login = token => {\n    setToken(token);\n    localStorage.setItem(\"user-token\", token);\n    console.log(token);\n    setPage(\"authors\");\n    loggedUser();\n  };\n\n  const logout = () => {\n    setToken(null);\n    localStorage.clear();\n    console.log(token);\n    client.resetStore();\n    setPage(\"authors\");\n  };\n\n  const updateCacheWith = addedBook => {\n    const includedIn = (set, object) => set.map(p => p.id).includes(object.id);\n\n    const dataInStore = client.readQuery({\n      query: ALL_BOOKS\n    });\n\n    if (!includedIn(dataInStore.allBooks, addedBook)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: {\n          allBooks: dataInStore.allBooks.concat(addedBook)\n        }\n      });\n    }\n  };\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({\n      subscriptionData\n    }) => {\n      const addedBook = subscriptionData.data.bookAdded;\n      notify(`${addedBook.title} was just added to the library!`);\n      updateCacheWith(addedBook);\n      console.log(subscriptionData);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Notify, {\n      errorMessage: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(\"authors\"),\n        children: \"authors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(\"books\"),\n        children: \"books\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), token && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          loggedUser();\n          setPage(\"rec\");\n        },\n        children: \"recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), token && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(\"add\"),\n        children: \"add book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }, this), !token && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(\"login\"),\n        children: \"login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 20\n      }, this), token && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logout,\n        children: \"logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Authors, {\n      show: page === \"authors\",\n      setError: notify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Books, {\n      show: page === \"books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewBook, {\n      show: page === \"add\",\n      setError: notify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), loggedUser && /*#__PURE__*/_jsxDEV(Recommendations, {\n      show: page === \"rec\",\n      setError: notify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n      show: page === \"login\",\n      setError: notify,\n      setToken: login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"C5KqkIPxSdSqPKV3Eeby5J+giL0=\", false, function () {\n  return [useApolloClient, useLazyQuery, useSubscription];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Notify\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/App.js"],"names":["React","useState","useEffect","useApolloClient","useSubscription","useLazyQuery","Authors","Books","NewBook","LoginForm","Recommendations","BOOK_ADDED","ALL_BOOKS","LOGGED_USER","Notify","errorMessage","color","App","page","setPage","token","setToken","setErrorMessage","client","loggedUser","result","pollInterval","notify","message","setTimeout","localStorage","getItem","login","setItem","console","log","logout","clear","resetStore","updateCacheWith","addedBook","includedIn","set","object","map","p","id","includes","dataInStore","readQuery","query","allBooks","writeQuery","data","concat","onSubscriptionData","subscriptionData","bookAdded","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useApolloClient, useSubscription, useLazyQuery } from \"@apollo/client\";\nimport Authors from \"./components/Authors\";\nimport Books from \"./components/Books\";\nimport NewBook from \"./components/NewBook\";\nimport LoginForm from \"./components/LoginForm\";\nimport Recommendations from \"./components/Recommendations\";\nimport { BOOK_ADDED, ALL_BOOKS, LOGGED_USER } from \"./queries\";\n//import \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Notify = ({ errorMessage }) => {\n  if (!errorMessage) {\n    return null;\n  }\n  return <div style={{ color: \"red\" }}>{errorMessage}</div>;\n};\n\nconst App = () => {\n  const [page, setPage] = useState(\"authors\");\n  const [token, setToken] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const client = useApolloClient();\n\n  const [loggedUser, result] = useLazyQuery(LOGGED_USER, {\n    pollInterval: 1000,\n  });\n\n  const notify = (message) => {\n    setErrorMessage(message);\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 3000);\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"user-token\");\n    return !token ? null : setToken(token);\n  }, []);\n\n  const login = (token) => {\n    setToken(token);\n    localStorage.setItem(\"user-token\", token);\n    console.log(token);\n    setPage(\"authors\");\n    loggedUser();\n  };\n\n  const logout = () => {\n    setToken(null);\n    localStorage.clear();\n    console.log(token);\n    client.resetStore();\n    setPage(\"authors\");\n  };\n\n  const updateCacheWith = (addedBook) => {\n    const includedIn = (set, object) =>\n      set.map((p) => p.id).includes(object.id);\n\n    const dataInStore = client.readQuery({ query: ALL_BOOKS });\n    if (!includedIn(dataInStore.allBooks, addedBook)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: { allBooks: dataInStore.allBooks.concat(addedBook) },\n      });\n    }\n  };\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const addedBook = subscriptionData.data.bookAdded;\n      notify(`${addedBook.title} was just added to the library!`);\n      updateCacheWith(addedBook);\n      console.log(subscriptionData);\n    },\n  });\n\n  return (\n    <div>\n      <Notify errorMessage={errorMessage} />\n      <div>\n        <button onClick={() => setPage(\"authors\")}>authors</button>\n        <button onClick={() => setPage(\"books\")}>books</button>\n        {token && (\n          <button\n            onClick={() => {\n              loggedUser();\n              setPage(\"rec\");\n            }}\n          >\n            recommendations\n          </button>\n        )}\n        {token && <button onClick={() => setPage(\"add\")}>add book</button>}\n        {!token && <button onClick={() => setPage(\"login\")}>login</button>}\n        {token && <button onClick={logout}>logout</button>}\n      </div>\n      <Authors show={page === \"authors\"} setError={notify} />\n      <Books show={page === \"books\"} />\n      <NewBook show={page === \"add\"} setError={notify} />\n      {loggedUser && (\n        <Recommendations show={page === \"rec\"} setError={notify} />\n      )}\n      <LoginForm show={page === \"login\"} setError={notify} setToken={login} />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}