{"ast":null,"code":"var _jsxFileName = \"/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/components/Recommendations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { ALL_BOOKS, ALLBOOKSGENRES, USER } from \"../queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Recommendations = props => {\n  _s();\n\n  const user = useQuery(USER);\n  console.log(\"me me me     \", user);\n  const genre = user.data && user.data.me ? user.data.me.favoriteGenre : null;\n  const result = useQuery(ALL_BOOKS, {\n    variables: {\n      genre\n    },\n    fetchPolicy: \"cache-and-network\"\n  }); // eslint-disable-next-line react/prop-types\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (result.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n\n  const books = result.data && result.data.allBooks || [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"books in your favorite genre \", genre, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"published\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"genres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), books.map(a => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", a.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.author.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.published\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)]\n        }, a.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recommendations, \"Qs3fZij8sO7i2M/i04zU4DLq6LY=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = Recommendations;\nexport default Recommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"sources":["/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/components/Recommendations.js"],"names":["React","useEffect","useState","useLazyQuery","useQuery","ALL_BOOKS","ALLBOOKSGENRES","USER","Recommendations","props","user","console","log","genre","data","me","favoriteGenre","result","variables","fetchPolicy","show","loading","books","allBooks","map","a","title","author","name","published"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,gBAAvC;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,IAApC,QAAgD,YAAhD;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAMC,IAAI,GAAGN,QAAQ,CAACG,IAAD,CAArB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,IAA7B;AAEA,QAAMG,KAAK,GAAGH,IAAI,CAACI,IAAL,IAAaJ,IAAI,CAACI,IAAL,CAAUC,EAAvB,GAA4BL,IAAI,CAACI,IAAL,CAAUC,EAAV,CAAaC,aAAzC,GAAyD,IAAvE;AACA,QAAMC,MAAM,GAAGb,QAAQ,CAACC,SAAD,EAAY;AACjCa,IAAAA,SAAS,EAAE;AAAEL,MAAAA;AAAF,KADsB;AAEjCM,IAAAA,WAAW,EAAE;AAFoB,GAAZ,CAAvB,CANiC,CAWjC;;AACA,MAAI,CAACV,KAAK,CAACW,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AACD,MAAIH,MAAM,CAACI,OAAX,EAAoB;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,QAAMC,KAAK,GAAIL,MAAM,CAACH,IAAP,IAAeG,MAAM,CAACH,IAAP,CAAYS,QAA5B,IAAyC,EAAvD;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAA,oDAAiCV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA,6BACE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAOGS,KAAK,CAACE,GAAN,CAAWC,CAAD,iBACT;AAAA,kCACE;AAAA,4BAAMA,CAAC,CAACC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKD,CAAC,CAACE,MAAF,CAASC;AAAd;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAKH,CAAC,CAACI;AAAP;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,WAASJ,CAAC,CAACC,KAAX;AAAA;AAAA;AAAA;AAAA,gBADD,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CA7CD;;GAAMlB,e;UACSJ,Q,EAKEA,Q;;;KANXI,e;AA+CN,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { ALL_BOOKS, ALLBOOKSGENRES, USER } from \"../queries\";\n\nconst Recommendations = (props) => {\n  const user = useQuery(USER);\n\n  console.log(\"me me me     \", user);\n\n  const genre = user.data && user.data.me ? user.data.me.favoriteGenre : null;\n  const result = useQuery(ALL_BOOKS, {\n    variables: { genre },\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  // eslint-disable-next-line react/prop-types\n  if (!props.show) {\n    return null;\n  }\n  if (result.loading) {\n    return <div>loading...</div>;\n  }\n  const books = (result.data && result.data.allBooks) || [];\n\n  return (\n    <div>\n      <h2>Recommendations</h2>\n      <div>\n        <p>books in your favorite genre {genre} </p>\n      </div>\n      <table>\n        <tbody>\n          <tr>\n            <th>title</th>\n            <th>author</th>\n            <th>published</th>\n            <th>genres</th>\n          </tr>\n          {books.map((a) => (\n            <tr key={a.title}>\n              <td> {a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Recommendations;\n"]},"metadata":{},"sourceType":"module"}