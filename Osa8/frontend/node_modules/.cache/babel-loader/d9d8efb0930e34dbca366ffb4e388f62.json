{"ast":null,"code":"var _jsxFileName = \"/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/components/Books.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { ALL_BOOKS } from \"../queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Books = props => {\n  _s();\n\n  const [filter, setFilter] = useState(null);\n  let books = useQuery(ALL_BOOKS);\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (books.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  }\n\n  books = books.data.allBooks;\n  let genrelist = [];\n  books.map(a => a.genres.forEach(genre => {\n    genrelist.push(genre);\n  }));\n  genrelist = [...new Set(genrelist)];\n\n  if (filter) {\n    books = books.filter(books => books.genres.includes(filter));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"published\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), books.map(a => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.author.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.published\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)]\n        }, a.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Filter by genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), genrelist.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setFilter(genre),\n      value: genre,\n      children: genre\n    }, genre, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setFilter(null),\n      children: \"all\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Books, \"De8hrt8ZkiR3SvYKorbWssXXulE=\", false, function () {\n  return [useQuery];\n});\n\n_c = Books;\nexport default Books;\n\nvar _c;\n\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"sources":["/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/components/Books.js"],"names":["React","useState","useQuery","ALL_BOOKS","Books","props","filter","setFilter","books","show","loading","data","allBooks","genrelist","map","a","genres","forEach","genre","push","Set","includes","title","author","name","published"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,SAAT,QAA0B,YAA1B;;;AACA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;AACA,MAAIO,KAAK,GAAGN,QAAQ,CAACC,SAAD,CAApB;;AAEA,MAAI,CAACE,KAAK,CAACI,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,MAAID,KAAK,CAACE,OAAV,EAAmB;AACjB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAEDF,EAAAA,KAAK,GAAGA,KAAK,CAACG,IAAN,CAAWC,QAAnB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEAL,EAAAA,KAAK,CAACM,GAAN,CAAWC,CAAD,IACRA,CAAC,CAACC,MAAF,CAASC,OAAT,CAAkBC,KAAD,IAAW;AAC1BL,IAAAA,SAAS,CAACM,IAAV,CAAeD,KAAf;AACD,GAFD,CADF;AAKAL,EAAAA,SAAS,GAAG,CAAC,GAAG,IAAIO,GAAJ,CAAQP,SAAR,CAAJ,CAAZ;;AAEA,MAAIP,MAAJ,EAAY;AACVE,IAAAA,KAAK,GAAGA,KAAK,CAACF,MAAN,CAAcE,KAAD,IAAWA,KAAK,CAACQ,MAAN,CAAaK,QAAb,CAAsBf,MAAtB,CAAxB,CAAR;AACD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAMGE,KAAK,CAACM,GAAN,CAAWC,CAAD,iBACT;AAAA,kCACE;AAAA,sBAAKA,CAAC,CAACO;AAAP;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKP,CAAC,CAACQ,MAAF,CAASC;AAAd;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAKT,CAAC,CAACU;AAAP;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,WAASV,CAAC,CAACO,KAAX;AAAA;AAAA;AAAA;AAAA,gBADD,CANH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF,EAmBGT,SAAS,CAACC,GAAV,CAAeI,KAAD,iBACb;AAAQ,MAAA,OAAO,EAAE,MAAMX,SAAS,CAACW,KAAD,CAAhC;AAAqD,MAAA,KAAK,EAAEA,KAA5D;AAAA,gBACGA;AADH,OAA8CA,KAA9C;AAAA;AAAA;AAAA;AAAA,YADD,CAnBH,eAwBE;AAAQ,MAAA,OAAO,EAAE,MAAMX,SAAS,CAAC,IAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CAtDD;;GAAMH,K;UAEQF,Q;;;KAFRE,K;AAwDN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { ALL_BOOKS } from \"../queries\";\nconst Books = (props) => {\n  const [filter, setFilter] = useState(null);\n  let books = useQuery(ALL_BOOKS);\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (books.loading) {\n    return <div>loading...</div>;\n  }\n\n  books = books.data.allBooks;\n  let genrelist = [];\n\n  books.map((a) =>\n    a.genres.forEach((genre) => {\n      genrelist.push(genre);\n    })\n  );\n  genrelist = [...new Set(genrelist)];\n\n  if (filter) {\n    books = books.filter((books) => books.genres.includes(filter));\n  }\n\n  return (\n    <div>\n      <h2>books</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>title</th>\n            <th>author</th>\n            <th>published</th>\n          </tr>\n          {books.map((a) => (\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h4>Filter by genre</h4>\n      {genrelist.map((genre) => (\n        <button onClick={() => setFilter(genre)} key={genre} value={genre}>\n          {genre}\n        </button>\n      ))}\n      <button onClick={() => setFilter(null)}>all</button>\n    </div>\n  );\n};\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}