{"ast":null,"code":"var _jsxFileName = \"/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) graphQLErrors.forEach(({\n    message,\n    locations,\n    path\n  }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(\"user-token\");\n  return {\n    headers: { ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  };\n});\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4000\"\n});\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink, errorLink)\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 44,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","setContext","onError","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","authLink","_","headers","token","localStorage","getItem","authorization","httpLink","uri","client","cache","link","concat","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;AAEA,SACEC,YADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,aAJF,QAKO,gBALP;AAMA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;;AAEA,MAAMC,SAAS,GAAGD,OAAO,CAAC,CAAC;AAAEE,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAqC;AAC7D,MAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,GAAD,KACpBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADF;AAMF,MAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACnB,CATwB,CAAzB;AAWA,MAAMO,QAAQ,GAAGX,UAAU,CAAC,CAACY,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,QAAQ,GAAG,IAAIpB,QAAJ,CAAa;AAAEqB,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,MAAM,GAAG,IAAIxB,YAAJ,CAAiB;AAC9ByB,EAAAA,KAAK,EAAE,IAAItB,aAAJ,EADuB;AAE9BuB,EAAAA,IAAI,EAAEX,QAAQ,CAACY,MAAT,CAAgBL,QAAhB,EAA0BhB,SAA1B;AAFwB,CAAjB,CAAf;AAKAR,QAAQ,CAAC8B,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEJ,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEK,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"@apollo/client/link/error\";\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"user-token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    },\n  };\n});\n\nconst httpLink = new HttpLink({ uri: \"http://localhost:4000\" });\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink, errorLink),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}