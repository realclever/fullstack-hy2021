{"ast":null,"code":"var _jsxFileName = \"/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/components/Books.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { ALL_BOOKS } from \"../queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Books = ({\n  setError,\n  show\n}) => {\n  _s();\n\n  const [genreFilter, setgenreFilter] = useState(\"\");\n  const result = useQuery(ALL_BOOKS, {\n    onError: error => {\n      setError(error.graphQLErrors[0].message);\n    }\n  });\n  if (result.loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"wait..loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 30\n  }, this);\n  let genresFilter = [];\n  result.data.allBooks.map(b => b.genres.map(g => {\n    genresFilter.push(g);\n    return genresFilter = [...new Set(genresFilter)]; //generates a unique set without duplicates\n  }));\n  if (!show) return null;\n  const booksFilter = !genreFilter ? result.data.allBooks : result.data.allBooks.filter(b => b.genres.includes(genreFilter));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: genreFilter ? /*#__PURE__*/_jsxDEV(\"em\", {\n        children: [\"in genre \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: genreFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"published\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"genres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), booksFilter.map(a => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", a.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.author.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.published\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [a.genres.join(\", \"), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, a.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), genresFilter.map(b => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setgenreFilter(b),\n      value: b,\n      children: b\n    }, b, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setgenreFilter(\"\"),\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Books, \"QIewjHMvKw6oGE+4Ydey0lK5mTE=\", false, function () {\n  return [useQuery];\n});\n\n_c = Books;\nexport default Books;\n\nvar _c;\n\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"sources":["/Users/mattimikael/fullstack-hy2021/Osa8/frontend/src/components/Books.js"],"names":["React","useState","useQuery","ALL_BOOKS","Books","setError","show","genreFilter","setgenreFilter","result","onError","error","graphQLErrors","message","loading","genresFilter","data","allBooks","map","b","genres","g","push","Set","booksFilter","filter","includes","a","title","author","name","published","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { ALL_BOOKS } from \"../queries\";\n\nconst Books = ({ setError, show }) => {\n  const [genreFilter, setgenreFilter] = useState(\"\");\n\n  const result = useQuery(ALL_BOOKS, {\n    onError: (error) => {\n      setError(error.graphQLErrors[0].message);\n    },\n  });\n\n  if (result.loading) return <div>wait..loading...</div>;\n\n  let genresFilter = [];\n  result.data.allBooks.map((b) =>\n    b.genres.map((g) => {\n      genresFilter.push(g);\n      return (genresFilter = [...new Set(genresFilter)]); //generates a unique set without duplicates\n    })\n  );\n\n  if (!show) return null;\n\n  const booksFilter = !genreFilter\n    ? result.data.allBooks\n    : result.data.allBooks.filter((b) => b.genres.includes(genreFilter));\n\n  return (\n    <div>\n      <h2>Books</h2>\n      <div>\n        {genreFilter ? (\n          <em>\n            in genre <strong>{genreFilter}</strong>\n          </em>\n        ) : (\n          <p></p>\n        )}\n      </div>\n      <br></br>\n      <table>\n        <tbody>\n          <tr>\n            <th>title</th>\n            <th>author</th>\n            <th>published</th>\n            <th>genres</th>\n          </tr>\n          {booksFilter.map((a) => (\n            <tr key={a.title}>\n              <td> {a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n              <td>{a.genres.join(\", \")} </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <br></br>\n      {genresFilter.map((b) => (\n        <button onClick={() => setgenreFilter(b)} key={b} value={b}>\n          {b}\n        </button>\n      ))}\n      <button onClick={() => setgenreFilter(\"\")}>All</button>\n    </div>\n  );\n};\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}